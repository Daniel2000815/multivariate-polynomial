/**
 * This is what nerdamer returns. It's sort of a wrapper around the symbol class and
 * provides the user with some useful functions. If you want to provide the user with extra
 * library functions then add them to this class's prototype.
 * @param {Symbol} symbol
 */
export class Expression {
    /** @deprecated */
    static $EXPRESSIONS: any;
    /**
     * Returns stored expression at index. For first index use 1 not 0.
     * @param {number | string} expression_number
     * @param {boolean} asType
     */
    static getExpression(expression_number: number | string, asType?: boolean): any;
    constructor(symbol: any);
    symbol: any;
    /**
     * Returns the text representation of the expression
     * @param {String} opt - option of formatting numbers
     * @param {Number} n The number of significant figures
     * @returns {String}
     */
    text(opt?: string, n?: number): string;
    /**
     * Returns the latex representation of the expression
     * @param {String} option - option for formatting numbers
     * @returns {String}
     */
    latex(option: string): string;
    valueOf(): any;
    /**
     * Evaluates the expression and tries to reduce it to a number if possible.
     * If an argument is given in the form of %{integer} it will evaluate that expression.
     * Other than that it will just use it's own text and reparse
     * @returns {Expression}
     */
    evaluate(...args: any[]): Expression;
    /**
     * Converts a symbol to a JS function. Pass in an array of variables to use that order instead of
     * the default alphabetical order
     * @param vars {Array}
     */
    buildFunction(vars: any[]): Function;
    /**
     * Checks to see if the expression is just a plain old number
     * @returns {boolean}
     */
    isNumber(): boolean;
    /**
     * Checks to see if the expression is infinity
     * @returns {boolean}
     */
    isInfinity(): boolean;
    /**
     * Checks to see if the expression contains imaginary numbers
     * @returns {boolean}
     */
    isImaginary(): boolean;
    /**
     * Returns all the variables in the expression
     * @returns {Array}
     */
    variables(): any[];
    /**
     *
     * @return {string}
     */
    toString(): string;
    toDecimal(prec: any): string;
    isFraction(): boolean;
    isPolynomial(): any;
    sub(symbol: any, for_symbol: any): Expression;
    operation(otype: any, symbol: any): Expression;
    add(symbol: any): Expression;
    subtract(symbol: any): Expression;
    multiply(symbol: any): Expression;
    divide(symbol: any): Expression;
    pow(symbol: any): Expression;
    expand(): Expression;
    each(callback: any, i: any): void;
    eq(value: any): any;
    lt(value: any): any;
    gt(value: any): any;
    gte(value: any): any;
    lte(value: any): any;
    numerator(): Expression;
    denominator(): Expression;
    hasFunction(f: any): any;
    contains(variable: any): any;
    toTeX(option: any): string;
}
