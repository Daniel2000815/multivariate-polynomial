export namespace Build {
    namespace dependencies {
        const _rename: {
            'Math2.factorial': string;
        };
        const factorial: {
            'Math2.gamma': (z: any) => any;
        };
        const gamma_incomplete: {
            'Math2.factorial': (x: any) => any;
        };
        const Li: {
            'Math2.Ei': (x: any) => number;
            'Math2.bigLog': (x: any) => any;
            Frac: typeof Frac;
        };
        const Ci: {
            'Math2.factorial': (x: any) => any;
        };
        const Ei: {
            'Math2.factorial': (x: any) => any;
        };
        const Si: {
            'Math2.factorial': (x: any) => any;
        };
        const Shi: {
            'Math2.factorial': (x: any) => any;
        };
        const Chi: {
            isInt: typeof isInt;
            nround: typeof nround;
            'Math2.num_integrate': (f: Function, a: number, b: number, tol: number, maxdepth: number) => number;
        };
        const factor: {
            'Math2.ifactor': (n: any) => object;
            Symbol: typeof Symbol;
        };
        const num_integrate: {
            'Math2.simpson': (f: any, a: any, b: any, step: any) => number;
            nround: typeof nround;
        };
        namespace fib {
            export { even };
        }
    }
    namespace reformat {
        function diff(symbol: any, deps: any): any[];
    }
    function getProperName(f: any): any;
    function compileDependencies(f: any, deps: any): any[];
    function getArgsDeps(symbol: any, dependencies: any): any;
    function build(symbol: any, arg_array: any): Function;
}
import { Frac } from "../Types/Frac";
import { isInt } from "../Core/Utils";
import { nround } from "../Core/Utils";
import { Symbol } from "../Types/Symbol";
import { even } from "../Core/Utils";
