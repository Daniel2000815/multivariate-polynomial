import { Token } from './Token';
import { OperatorDictionary } from '../Providers/OperatorDictionary';
import { FunctionProvider } from '../Providers/FunctionProvider';
export declare class Tokenizer {
    private readonly functions;
    private readonly brackets;
    private readonly operators;
    private readonly units;
    private preprocessors;
    constructor(functionsProvider: FunctionProvider, operators: OperatorDictionary, units: Record<string, any>);
    tokenize(e: string, shouldPrepare?: boolean): any[];
    addPreprocessor(name: string, action: string, order: number, shift_cells: boolean): void;
    getPreprocessors(): Record<string, any>;
    removePreprocessor(name: string, shift_cells: boolean): void;
    prepareExpression(e: string): string;
    tree(tokens: Token[]): any;
}
