export class Matrix {
    static identity(n: any): Matrix;
    static fromArray(arr: any): Matrix;
    static zeroMatrix(rows: any, cols: any): Matrix;
    constructor(...m: any[]);
    custom: boolean;
    elements: any[];
    get(row: any, column: any): any;
    map(f: any, raw_values: any): Matrix;
    set(row: any, column: any, value: any, raw: any): void;
    cols(): any;
    rows(): number;
    row(n: any): any;
    col(n: any): any[];
    eachElement(fn: any): void;
    determinant(): any;
    isSquare(): boolean;
    isSingular(): boolean;
    augment(m: any): Matrix;
    clone(): Matrix;
    invert(): Matrix;
    toRightTriangular(): any;
    transpose(): Matrix;
    canMultiplyFromLeft(matrix: any): boolean;
    sameSize(matrix: any): boolean;
    multiply(matrix: any): Matrix | null;
    add(matrix: any, callback: any): Matrix;
    subtract(matrix: any, callback: any): Matrix;
    negate(): Matrix;
    toVector(): Vector | Matrix;
    toString(newline: any, to_decimal: any): string;
    text(): string;
    latex(option: any): string;
    each(fn: any): void;
}
import { Vector } from "./Vector";
