export class LaTeX {
    /** @deprecated */
    static space: string;
    static dot: string;
    static _parser: any;
    static get parser(): any;
    static createParser(): Parser;
    static latex(symbol: any, option: any): any;
    static greek: {
        alpha: string;
        beta: string;
        gamma: string;
        delta: string;
        epsilon: string;
        zeta: string;
        eta: string;
        theta: string;
        iota: string;
        kappa: string;
        lambda: string;
        mu: string;
        nu: string;
        xi: string;
        omnikron: string;
        pi: string;
        rho: string;
        sigma: string;
        tau: string;
        upsilon: string;
        phi: string;
        chi: string;
        psi: string;
        omega: string;
        Gamma: string;
        Delta: string;
        Epsilon: string;
        Theta: string;
        Lambda: string;
        Xi: string;
        Pi: string;
        Sigma: string;
        Phi: string;
        Psi: string;
        Omega: string;
    };
    static symbols: {
        arccos: string;
        cos: string;
        csc: string;
        exp: string;
        ker: string;
        limsup: string;
        min: string;
        sinh: string;
        arcsin: string;
        cosh: string;
        deg: string;
        gcd: string;
        lg: string;
        ln: string;
        Pr: string;
        sqrt: string;
        sup: string;
        arctan: string;
        cot: string;
        det: string;
        hom: string;
        lim: string;
        log: string;
        LN: string;
        sec: string;
        tan: string;
        arg: string;
        coth: string;
        dim: string;
        inf: string;
        liminf: string;
        max: string;
        sin: string;
        tanh: string;
    };
    static value(symbol: any, inverted: any, option: any, negative: any): string[];
    static set(m: any, v: any, p: any, combine_power: any): any;
    static merge(a: any, b: any): any[];
    static join(n: any, d: any, glue: any): any;
    /**
     * Places subscripts in braces for proper formatting
     * @param {String} v
     * @returns {String}
     */
    static formatSubscripts(v: string): string;
    static formatP(p_array: any): any;
    /**
     * formats the fractions accordingly.
     * @param {Frac} f
     * @param {boolean} is_pow
     */
    static formatFrac(f: any, is_pow: boolean): any;
    static frac(n: any, d: any): string;
    static braces(e: any): string;
    static brackets(e: any, typ: any): string;
    /**
     * Removes extreneous tokens
     * @param {Tokens[]} tokens
     * @returns {Tokens[]}
     */
    static filterTokens(tokens: any[]): any[];
    static parse(raw_tokens: any): string;
}
import { Parser } from "../Parser/Parser";
