export declare class DivisionByZero extends Error {
    name: string;
}
export declare class ParseError extends Error {
    name: string;
}
export declare class UndefinedError extends Error {
    name: string;
}
export declare class OutOfFunctionDomainError extends Error {
    name: string;
}
export declare class MaximumIterationsReached extends Error {
    name: string;
}
export declare class NerdamerTypeError extends Error {
    name: string;
}
export declare class ParityError extends Error {
    name: string;
}
export declare class OperatorError extends Error {
    name: string;
}
export declare class OutOfRangeError extends Error {
    name: string;
}
export declare class DimensionError extends Error {
    name: string;
}
export declare class ValueLimitExceededError extends Error {
    name: string;
}
export declare class NerdamerValueError extends Error {
    name: string;
}
export declare class SolveError extends Error {
    name: string;
}
export declare class InfiniteLoopError extends Error {
    name: string;
}
export declare class UnexpectedTokenError extends Error {
    name: string;
}
export declare class InvalidVariableNameError extends Error {
    name: string;
}
export declare class PreprocessorError extends Error {
    name: string;
}
/**
 * Use this when errors are suppressible
 * @param {String} message
 * @param {object} errorObj
 */
export declare function err<T>(message: string, errorObj?: {
    new (message: string): T;
}): void;
